<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="266" height="228"  creationComplete="init()"   backgroundColor="#3E413E" backgroundAlpha="0.0" borderStyle="solid" cornerRadius="0" alpha="1.0" click="setCanvasFocus()">

	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
		
			public  var netConnection:NetConnection = null;
			private var incomingNetStream:NetStream = null
			private var outgoingNetStream:NetStream = null;
			private var publishName:String          = null;
			private var mic:Microphone 				= null;
			private var isConnected:Boolean			= false;
			private var muted:Boolean			    = false;
			private var isRinging:Boolean			= false;
			private var isDialing:Boolean			= false;
			private var ringSound:Sound 			= null
			private var dialSound:Sound 			= null
			private var req:URLRequest 				= null;
			private var ringChannel:SoundChannel    = null;
			private var dialChannel:SoundChannel    = null;
			private var dtmfChannel:SoundChannel    = null;
			private var conferenceFlag:Boolean 	= false
					
			private var timer:Timer;
			private var elapsed:uint;
			private var lastTime:uint;
			
			[@Embed(source="assets/gray.png")]
			public const gray:Class;
		
			[@Embed(source="assets/green.png")]
			public const green:Class;

			[@Embed(source="assets/red.png")]
			public const red:Class;

			[@Embed(source="assets/microphone.png")]
			public const micActive:Class;

			[@Embed(source="assets/icon_phone-mute_16x16.png")]
			public const micMute:Class;

			[@Embed(source="assets/icon_speaker_16x16.png")]
			public const speaker:Class;
			
			[@Embed(source="assets/conference_16x16.png")]
			public const conference:Class;			

			[@Embed(source="assets/history.png")]
			public const history:Class;

			[@Embed(source="assets/flag_red.png")]
			public const redFlag:Class;

			[@Embed(source="assets/mail_16x16.png")]
			public const mail:Class;

			[@Embed(source="assets/dtmf/0.mp3")]
			public const dtmf0:Class;

			[@Embed(source="assets/dtmf/1.mp3")]
			public const dtmf1:Class;

			[@Embed(source="assets/dtmf/2.mp3")]
			public const dtmf2:Class;

			[@Embed(source="assets/dtmf/3.mp3")]
			public const dtmf3:Class;

			[@Embed(source="assets/dtmf/4.mp3")]
			public const dtmf4:Class;

			[@Embed(source="assets/dtmf/5.mp3")]
			public const dtmf5:Class;

			[@Embed(source="assets/dtmf/6.mp3")]
			public const dtmf6:Class;

			[@Embed(source="assets/dtmf/7.mp3")]
			public const dtmf7:Class;

			[@Embed(source="assets/dtmf/8.mp3")]
			public const dtmf8:Class;

			[@Embed(source="assets/dtmf/9.mp3")]
			public const dtmf9:Class;

			[@Embed(source="assets/dtmf/hash.mp3")]
			public const dtmfHash:Class;

			[@Embed(source="assets/dtmf/star.mp3")]
			public const dtmfStar:Class;

            		[@Embed(source="assets/ringing.mp3")] 
			private var ringingClass:Class; 
			
			[@Embed(source="assets/dialing.mp3")] 
			private var dialingClass:Class; 
			[Bindable]
			public var missedCalls:Array;

			[Bindable]
			public var receivedCalls:Array;

			[Bindable]
			public var dialedCalls:Array;

			private var incomingCallObj:Object;
			private var dialedCallObj:Object;
          	
			
			private function init():void {
				timer =  new Timer(1000, 0);
				timer.addEventListener(TimerEvent.TIMER, timerHandler);

				ringSound = new ringingClass();
				dialSound = new dialingClass();
				initMicrophone();
				missedCalls 	= new Array();
				receivedCalls   = new Array();
				dialedCalls 	= new Array();
			}
			
			
			private function setCanvasFocus():void {
				this.setFocus();
			}

			
			public function initMicrophone():void {
				mic = Microphone.getMicrophone();
		
				if(mic == null){
					trace("No available microphone");
				} else {
					mic.setUseEchoSuppression(true);
					mic.setLoopBack(false);
					mic.setSilenceLevel(10,20000);
					mic.gain = 60;
					mic.rate = 8;
					mic.addEventListener(ActivityEvent.ACTIVITY, micActivityHandler);
					mic.addEventListener(StatusEvent.STATUS, micStatusHandler);
										
					//mic.codec = "Speex";
					//mic.encodeQuality = 10;
					//mic.framesPerPacket = 2;

				}
			}	
			
			
			private function micActivityHandler(event:ActivityEvent):void {}
	
			private function micStatusHandler(event:StatusEvent):void {		
				switch(event.code) {
		
				case "Microphone.Muted":
					break;
				case "Microphone.Unmuted":
					break;
				default:
					trace("unknown micStatusHandler event: " + event);
				}
			}
			
			private function toggleMute():void {
				if(isConnected) {
					if(!muted) {
						if(outgoingNetStream != null) {
							outgoingNetStream.close();
							outgoingNetStream = null;
							micIcon.source = micMute;
							muted = true;
						}
					}
					else {
						outgoingNetStream = new NetStream(getNetConnection());
						outgoingNetStream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
						outgoingNetStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);		
						outgoingNetStream.attachAudio(mic);
						outgoingNetStream.publish(publishName, "live"); 
						var custom_obj:Object = new Object();
						custom_obj.onPlayStatus = playStatus;
						outgoingNetStream.client = custom_obj;
						micIcon.source = micActive;
						muted = false;
					}
				}
			}
			
			private function getNetConnection():NetConnection {
				return netConnection;
			}
			
			private function setNetConnection(netConnection:NetConnection):void {
				this.netConnection = netConnection;
			}
			
			private function getPublishName():String {
				return publishName;
			}
			
			private function setPublishName(publishName:String):void {
				this.publishName = publishName;
			}
			
			public function incomingCall(event:IncomingCallEvent):void {
				statusTxt.text = "Incoming Call : " + (event.sourceName == "" ? event.source : event.sourceName);
				pickupButton.visible = true;
				dialButton.enabled   = false;
				clearButton.enabled  = true;
				indicatorIcon.source = red;
				if(!isRinging) {
					ringChannel = ringSound.play();
					isRinging = true;
				}		
				incomingCallObj = new Object();
				incomingCallObj.label = event.sourceName;
				incomingCallObj.data  = event.source;	
				incomingCallObj.time  = new Date().toString();
			}
		
			public function callConnected(netConnection:NetConnection, playName:String, publishName:String):void {
				isConnected = true;
				setNetConnection(netConnection);
				setPublishName(publishName);
				incomingNetStream = new NetStream(netConnection);
				incomingNetStream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
				incomingNetStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
				
				
				outgoingNetStream = new NetStream(netConnection);
				outgoingNetStream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
				outgoingNetStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);		
				outgoingNetStream.attachAudio(mic);
				
				var custom_obj:Object = new Object();
				custom_obj.onPlayStatus = playStatus;
				incomingNetStream.client = custom_obj;
				outgoingNetStream.client = custom_obj;
				
				incomingNetStream.play(playName); 
				outgoingNetStream.publish(publishName, "live"); 	
				
				volSlider.enabled 	 = true;
				micSlider.enabled 	 = true;
				
				pickupButton.visible 	= false;
				dialButton.enabled   	= false;				
				transferButton.visible	= true;
				clearButton.enabled  	= true;				
				
				if (conferenceFlag) {
					conferenceFlag = false;					
					transferButton.visible = false;
				}
				indicatorIcon.source = green;
				startTimer();
				
				if(isDialing) {
					dialChannel.stop();
					isDialing = false;
				}		
				
			}
			
			public function callDisconnected(event:CallDisconnectedEvent):void {
				if(incomingNetStream != null) {
					incomingNetStream.play(false); 
				}
				if(outgoingNetStream != null) {
					outgoingNetStream.attachAudio(null);
					outgoingNetStream.publish(null);
				}
				
				doHangUp();
				isConnected 		 = false;
				dialButton.enabled   = true;
				clearButton.enabled  = false;
				transferButton.visible=false;
				pickupButton.visible = false;
				
				volSlider.enabled    = false;
				micSlider.enabled    = false;
				if (event.message != "onUaCallFailed"){
				statusTxt.text       = "Hangup";
				}
				else {
				statusTxt.text       = "Busy or Rejected";
				}
				indicatorIcon.source = gray;
				stopTimer();
				
				if(isRinging) {
					ringChannel.stop();
					isRinging = false;
				}
				if(muted) {
					micIcon.source = micActive;
				}
				if(isDialing) {
					dialChannel.stop();
					isDialing = false;
				}
			}
			
			public function missedCall():void {
				
				statusTxt.text       = "Missed Call " + incomingCallObj.label;
				isConnected 		 = false;
				dialButton.enabled   = true;
				clearButton.enabled  = false;
				transferButton.visible=false;
				pickupButton.visible = false;
				indicatorIcon.source = gray;
				if(isRinging) {
					ringChannel.stop();
					isRinging = false;
				}
				if(missedCalls.length >= 10) {
					missedCalls.pop();
				}
				missedCalls.unshift(incomingCallObj);
				missedCallIndicator.source = redFlag;
			}
			
			public function mailBoxStatus(isWaiting:Boolean, newMessage:String, oldMessage:String):void {
				if(isWaiting) {
					voicemail.source = mail;
					voicemail.toolTip = newMessage + " New Message(s) and " + oldMessage + " Old Message(s)"
				}
				else {
					voicemail.source = null;
					voicemail.toolTip = ""
				}
			}
			
			public function mailBoxCount(newMessage:String, oldMessage:String):void {
				voicemail.toolTip = newMessage + " New Message(s) and " + oldMessage + " Old Message(s)"
			}
			
			private function netStatus (evt:NetStatusEvent ):void {		 

				switch(evt.info.code) {
			
					case "NetStream.Play.StreamNotFound":
						break;
			
					case "NetStream.Play.Failed":
						parentApplication.red5Manager.doStreamStatus("failed");
						break;
						
					case "NetStream.Play.Start":	
						parentApplication.red5Manager.doStreamStatus("start");	
						break;
						
					case "NetStream.Play.Stop":			
						parentApplication.red5Manager.doStreamStatus("stop");	
						break;
						
					case "NetStream.Buffer.Full":
						break;
						
					default:
						
				}			 
			} 
			
			private function asyncErrorHandler(event:AsyncErrorEvent):void {
	           trace("AsyncErrorEvent: " + event);
	        }
	        
	        private function playStatus(event:Object):void {}
			
			
			private function doCall():void {
				parentApplication.red5Manager.doCall(dialnumTxt.text);
				
				dialButton.enabled = false;
				clearButton.enabled = true;
				indicatorIcon.source = green;
				statusTxt.text = "Calling......";
				if(!isDialing) {
					dialChannel = dialSound.play(0,10);			
					isDialing = true;
				}
				if(dialedCalls.length >= 10) {
					dialedCalls.pop();
				}
				dialedCallObj 		= new Object();
				dialedCallObj.data  = dialnumTxt.text;
				dialedCallObj.label = dialnumTxt.text;
				dialedCallObj.time  = new Date().toString();
				dialedCalls.unshift(dialedCallObj);
			}
			
			public function doCall2(dialNum:String):void {
				parentApplication.red5Manager.doCall(dialNum);
				
				dialButton.enabled = false;
				clearButton.enabled = true;
				indicatorIcon.source = green;
				statusTxt.text = "Calling......";
				if(!isDialing) {
					dialChannel = dialSound.play(0,10);			
					isDialing = true;
				}
				if(dialedCalls.length >= 10) {
					dialedCalls.pop();
				}
				dialedCallObj 		= new Object();
				dialedCallObj.data  = dialNum;
				dialedCallObj.label = dialNum;
				dialedCallObj.time  = new Date().toString();	
				dialedCalls.unshift(dialedCallObj);
				
			}
			public function doTransfer():void {
				parentApplication.red5Manager.doTransfer(dialnumTxt.text);
			}
			public function doTransfer2(transferTo:String):void {
				parentApplication.red5Manager.doTransfer(dialnumTxt.text);
			}
			private function doHangUp():void {
				parentApplication.red5Manager.doHangUp();
				
				isConnected 		 = false;
				dialButton.enabled   = true;
				clearButton.enabled  = false;
				pickupButton.visible = false;
				transferButton.visible= false;
				volSlider.enabled    = false;
				micSlider.enabled    = false;
				indicatorIcon.source = gray;
				statusTxt.text 		 = "Hung up";
				stopTimer();
				
				if(muted) {
					micIcon.source = micActive;
				}
				if(isDialing) {
					dialChannel.stop();
					isDialing = false;
				}
			        if(isRinging) {
					ringChannel.stop();
					isRinging = false;
				}
			}
			
			
			private function doAccept():void {
				parentApplication.red5Manager.doAccept();
				
				if(isRinging) {
					ringChannel.stop();
					isRinging = false;
				}
				
				if(receivedCalls.length >= 10) {
					receivedCalls.pop();
				}
				receivedCalls.unshift(incomingCallObj);
				
				dialButton.enabled = false;
				clearButton.enabled = true;
			    transferButton.visible= true;
			}
			
			public function doClose1():void {
				parentApplication.red5Manager.doClose1();
					
			}
			public function doCallChar(chr:String):void {
				parentApplication.red5Manager.doCallChar(chr);
				dialnumTxt.text += chr;	
			}
			
			public function addChr(chr:String):void {
				dialnumTxt.text += chr;
			}
			
			public function removeChr():void {
				var i:int = dialnumTxt.text.length;
				if(i > 0) {
					dialnumTxt.text = dialnumTxt.text.substr(0, (i-1));
				}			
			}
			
			private function changeVolume(event:Event):void {
				var st:SoundTransform = incomingNetStream.soundTransform;
				
				st.volume = (volSlider.value) * .01;
				incomingNetStream.soundTransform = st;		
			}
			
			private function changeMicVolume(event:Event):void {
				mic.gain = (micSlider.value)
			}
			
			public function startTimer():void {
				lastTime = (new Date()).time;
				timer.start();
				elapsed = 0;
			}
			
			public function stopTimer():void {
				timer.stop();
				durationTxt.text = "";
			}
			
			public function timerHandler(event:TimerEvent):void {
				var tmp:uint = lastTime;
				lastTime = (new Date()).time;
				elapsed += lastTime - tmp;
			
				var ms:uint = elapsed;	
				var div:uint = 1000 * 60 * 60;
				var hour:uint = ms / div;
				ms -= hour * div;
				div /= 60;
				var min:uint = ms / div;
				ms -= min * div;
				div /= 60;
				var sec:uint = ms / div;
				ms -= sec * div;
			
				var tx:String = hour.toString() + ":"
				if (min < 10) tx += "0";
				tx += min.toString() + ":";
				if (sec < 10) tx += "0";
				tx += sec.toString() ;
			
				durationTxt.text = tx;
			}
			
			private function showHistory():void {
				var historyWin:HistoryWindow = new HistoryWindow();
				PopUpManager.addPopUp(historyWin, this, true);
				PopUpManager.centerPopUp(historyWin);
				
				missedCallIndicator.source = null;
			}
			
			private function doConference():void {
			
				conferenceFlag = true;
				
				if (isConnected)
					parentApplication.red5Manager.addToConf();
				else
					parentApplication.red5Manager.joinConf();			
			
			}
					
		]]>
	</mx:Script>
	
	
	<mx:SoundEffect id="dtmfOne" useDuration="true" duration="500"  autoLoad="true" source="{dtmf1}"/>
	<mx:SoundEffect id="dtmfTwo" useDuration="true" duration="500"  autoLoad="true" source="{dtmf2}"/>
	<mx:SoundEffect id="dtmfThree" useDuration="true" duration="500"  autoLoad="true" source="{dtmf3}"/>
	<mx:SoundEffect id="dtmfFour"  useDuration="true" duration="500"  autoLoad="true" source="{dtmf4}"/>
	<mx:SoundEffect id="dtmfFive"  useDuration="true" duration="500"  autoLoad="true" source="{dtmf5}"/>
	<mx:SoundEffect id="dtmfSix"  useDuration="true" duration="500"  autoLoad="true" source="{dtmf6}"/>
	<mx:SoundEffect id="dtmfSeven"  useDuration="true" duration="500"  autoLoad="true" source="{dtmf7}"/>
	<mx:SoundEffect id="dtmfEight"  useDuration="true" duration="500"  autoLoad="true" source="{dtmf8}"/>
	<mx:SoundEffect id="dtmfNine"   useDuration="true" duration="500"  autoLoad="true" source="{dtmf9}"/>
	<mx:SoundEffect id="dtmfZero"  useDuration="true"  duration="500"  autoLoad="true" source="{dtmf0}"/>    	
	<mx:SoundEffect id="dtmfHashEffect" useDuration="true" duration="500"   autoLoad="true" source="{dtmfHash}"/>
	<mx:SoundEffect id="dtmfStarEffect"   useDuration="true" duration="500"  autoLoad="true" source="{dtmfStar}"/>
	


	<mx:Button x="10" y="100" label="1" id="cmdOne" click="doCallChar('1');" width="35" height="23" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #BCBCBC]"  color="#484848"  mouseDownEffect="{dtmfOne}"/>
	<mx:Button x="90" y="193" label="#" id="cmdPound" click="doCallChar('#');" width="35" height="23" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #BCBCBC]"  color="#484848"  mouseDownEffect="{dtmfHashEffect}"/>
	<mx:Button x="50" y="193" label="0" id="cmdZero" click="doCallChar('0');" width="35" height="23" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #BCBCBC]"  color="#484848"  mouseDownEffect="{dtmfZero}"/>
	<mx:Button x="10" y="193" label="*" id="cmdStar" click="doCallChar('*');" width="35" height="23" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #BCBCBC]"  color="#484848"  mouseDownEffect="{dtmfStarEffect}" />
	<mx:Button x="90" y="162" label="9" id="cmdNine" click="doCallChar('9');" width="35" height="23" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #BCBCBC]"  color="#484848"   mouseDownEffect="{dtmfNine}"/>
	<mx:Button x="50" y="162" label="8" id="cmdEight" click="doCallChar('8');"  width="35" height="23" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #BCBCBC]"  color="#484848"  mouseDownEffect="{dtmfEight}"/>
	<mx:Button x="90" y="131" label="6" id="cmdSix" click="doCallChar('6');"  width="35" height="23" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #BCBCBC]"  color="#484848"  mouseDownEffect="{dtmfSix}"/>
	<mx:Button x="10" y="131" label="4" id="cmdFour" click="doCallChar('4');" width="35" height="23" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #BCBCBC]"  color="#484848"  mouseDownEffect="{dtmfFour}" />
	<mx:Button x="50" y="100" label="2" id="cmdTwo"  click="doCallChar('2');" width="35" height="23" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #BCBCBC]"  color="#484848" mouseDownEffect="{dtmfTwo}" />
	<mx:Button x="90" y="100" label="3" id="cmdThree" click="doCallChar('3');" width="35" height="23" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #BCBCBC]"  color="#484848"  mouseDownEffect="{dtmfThree}" />
	<mx:Button x="50" y="131" label="5" id="cmdFive" click="doCallChar('5');" width="35" height="23" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #BCBCBC]"  color="#484848" mouseDownEffect="{dtmfFive}" />
	<mx:Button x="10" y="162" label="7" id="cmdSeven" click="doCallChar('7');" width="35" height="23" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #BCBCBC]"  color="#484848"  mouseDownEffect="{dtmfSeven}"/>
	<mx:Canvas x="12.5" y="10" width="239" height="78" borderStyle="solid" cornerRadius="10" backgroundColor="#F0F7FE"  borderColor="#191919" borderThickness="1" horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:Text x="69" y="2" width="158" color="#FF0000" id="statusTxt"/>
		<mx:Text x="10" y="30" width="215" id="dialnumTxt" fontWeight="normal" fontSize="12" fontFamily="Verdana"/>
		<mx:Text x="134" y="54"  width="91" id="durationTxt" textAlign="right"/>
		<mx:Image x="20" y="55" id="missedCallIndicator" width="16" height="16"/>
		<mx:Image x="54" y="55" width="16" height="16" id="voicemail"/>
		<mx:Text x="10" y="2" width="51" id="registerTxt" color="#20ED16"/>
	</mx:Canvas>
	<mx:Button x="133" y="132" label="Dial" fillAlphas="[1.0, 1.0]" fillColors="[#03CDFF, #0156A5]" click="doCall()" color="#FFFFFF" id="dialButton" width="69" themeColor="#0156A5"/>
	<mx:Button x="133" y="163" label="Hang up" fillAlphas="[1.0, 1.0]" fillColors="[#FF5A00, #B44001]" click="doHangUp()" color="#FFFFFF" enabled="false" id="clearButton" width="69" themeColor="#B44001"/>
	<mx:Button x="133" y="194" label="Answer" visible="false" fillAlphas="[1.0, 1.0]" fillColors="[#03CDFF, #0156A5]" click="doAccept()" color="#FFFFFF" id="pickupButton" width="69"  borderColor="#222222" alpha="1.0" themeColor="#0156A5"/>
	<mx:Image x="212" y="105" source="{speaker}" />
	<mx:Image id="micIcon" x="240" y="105" toolTip="Click Icon to Mute or Activate Mic" click="toggleMute()" source="{micActive}" />
	<mx:VSlider id="micSlider" x="237" y="132" height="84"  minimum="0" maximum="100" value="40" 
		allowTrackClick="true" liveDragging="true"  thumbDrag="changeMicVolume(event)" enabled="false" />
	<mx:VSlider id="volSlider" x="210" y="132" height="84" minimum="0" maximum="100" value="40" 
		allowTrackClick="true" liveDragging="true"  thumbDrag="changeVolume(event)" enabled="false" />
	<mx:Image x="185" y="105" source="{gray}" id="indicatorIcon"/>
	<mx:Image x="135" y="105" source="{history}" click="showHistory()" toolTip="Click Icon for CallHistory"/>
	<mx:Image x="160" y="105" source="{conference}" click="doConference()" toolTip="Click when idle to join a conference or when active to add caller to conference"/>	
	
	<mx:Button x="133" y="194" label="Transfer" id="transferButton" click="doTransfer()" visible="false"/>


</mx:Canvas>
