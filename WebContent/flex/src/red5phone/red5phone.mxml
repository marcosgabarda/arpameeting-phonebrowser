<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" creationComplete="init()" 
	preinitialize="presetup()"
	width="266" height="262" 
	xmlns:local="*" alpha="1.0" backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#A1A0A0, #020202]" borderStyle="solid" cornerRadius="10" xmlns:red5phone="red5phone.*">
	   
	<mx:Script>
		<![CDATA[
			
			import flash.external.*;
			import red5phone.Red5MessageEvent;
	                
	                
			private var configXML:XML;
		    	private var myuid:String;
		    	private var phone:String;
			private var username:String;
			private var password:String;
			private var red5Url:String;
			private var sipRealm:String;
			private var sipServer:String; 
			private var conference:String; 
			private var obProxy:String;
			public var red5Manager:Red5Manager     = null;

 			private static var externalConfig:Object;
			
			public function presetup():void 
			{
				
				externalConfig = {autologin: false, phone: "", username: "", password: "", conference: ""};				
				var tempConfig:Object = ExternalInterface.call("red5phone_getConfig");
				
				for (var extKey:String in tempConfig)
				{
					externalConfig[extKey.toLowerCase()] = tempConfig[extKey];
				}
			}
						
			private function init():void {
				var loader:URLLoader = new URLLoader();
			    	var request:URLRequest = new URLRequest("config.xml");	
			    	
				loader.load(request);
				loader.addEventListener(Event.COMPLETE, onComplete);			
			        ExternalInterface.addCallback("dial", function(destination:String):void {
				phoneCanvas.doCall2(destination);
				}); 
                ExternalInterface.addCallback("transfer", function(transferTo:String):void {
				phoneCanvas.doTransfer2(transferTo);
				}); 
                ExternalInterface.addCallback("login1", function(obProxy1:String,phone1:String, username1:String, password1:String, realm1:String, server1:String, url1:String, conference1:String):void {
				login(obProxy1, myuid, phone1, username1, password1, realm1,server1,url1,conference1);
				}); 
				ExternalInterface.addCallback("closeme", function():void {
				phoneCanvas.doClose1();
				});
			}
			
			private function onComplete(event:Event):void {
				configXML 	= new XML(event.target.data);
				red5Url 	= configXML.red5Url[0];
				sipRealm 	= configXML.sipRealm[0];
				sipServer 	= configXML.sipServer[0];
                obProxy     = configXML.obProxy[0];
                
                phone    = externalConfig.phone;
				username = externalConfig.username;
				password = externalConfig.password;
				conference = externalConfig.conference;
					
				loginCanvas.setParameters(obProxy, sipRealm, sipServer, red5Url, externalConfig.phone, externalConfig.username, externalConfig.password, externalConfig.conference, externalConfig.autologin);									
					
			}
			
			public function login(obProxy:String, myuid:String, phone:String, username:String, password:String, realm:String, server:String, url:String, conference:String):void {
				this.myuid = myuid;
				this.phone = phone;
				this.username = username;
				this.password = password;
				this.red5Url = url;
				this.sipRealm = realm;
				this.sipServer = server;
				this.obProxy = obProxy;
				this.conference   = conference;
				
				red5Manager = new Red5Manager(obProxy, myuid, phone, username, password, red5Url, sipRealm, sipServer, conference);
				red5Manager.connectRed5();
				red5Manager.addEventListener(Red5MessageEvent.MESSAGE, receivedRed5MessageEvent);
				red5Manager.addEventListener(IncomingCallEvent.INCOMING, incomingCallEvent);
				red5Manager.addEventListener(CallConnectedEvent.CONNECTED, callConnectedEvent);
				red5Manager.addEventListener(CallDisconnectedEvent.DISCONNECTED, callDisconnectedEvent);
				red5Manager.addEventListener(MissedCallEvent.CALLMISSED, missedCallEvent);
				red5Manager.addEventListener(MailBoxStatusEvent.MAIBOXSTATUS, mailBoxStatusEvent);
				red5Manager.addEventListener(MailBoxCountEvent.MAIBOXCOUNT, mailBoxCountEvent);
					
			}
			
			private function receivedRed5MessageEvent(event:Red5MessageEvent):void {
				var msgType:String 	= event.msgType;
				var message:String  = event.message;
				
				switch(msgType) {
					case Red5MessageEvent.NETSTAUS:
						loginCanvas.alertMessage.text = message;
						break;
				
					case Red5MessageEvent.SIP_REGISTER:
						if(message == 'SUCCESS') {
							loginCanvas.alertMessage.text = "Reg. Sucess";
							
							loginCanvas.visible = false;
							phoneCanvas.visible = true;
							this.addEventListener(KeyboardEvent.KEY_DOWN, keyHandler);
							phoneCanvas.registerTxt.text = "Ready";
							phoneCanvas.setFocus();
							
							//red5Manager.doMialBoxStatus();
							//red5Manager.doMailBoxCount();
							
						} 
						else {
							red5Manager.closeNetConnection();
							loginCanvas.alertMessage.text = "Reg. Failure = " + message;	
						        red5Manager = null;
						}
						
					
						break;
						
					case Red5MessageEvent.CALLSTATE:
					
						break;	
						
					default:	
				}
			}
			
			private function incomingCallEvent(event:IncomingCallEvent):void {
				trace("incomingCallEvent " + event.source + " " + event.sourceName);
				phoneCanvas.incomingCall(event);
			}
			
			private function callConnectedEvent(event:CallConnectedEvent):void {
				trace("CallConnectedEvent " + event.publishName + " " + event.playName);
				phoneCanvas.statusTxt.text = "Call Established";
				phoneCanvas.callConnected(red5Manager.netConnection, event.playName, event.publishName);
			}
			
			private function callDisconnectedEvent(event:CallDisconnectedEvent):void {
				trace("CallDisconnectedEvent " + event.message);
				phoneCanvas.callDisconnected(event);
			}
			
			private function missedCallEvent(event:MissedCallEvent):void {
				trace("CallDisconnectedEvent " + event.message);
				phoneCanvas.missedCall();
			}
			
			private function mailBoxStatusEvent(event:MailBoxStatusEvent):void {
				trace("MailBoxStatusEvent ");
				phoneCanvas.mailBoxStatus(event.isWaiting, event.newMessage, event.oldMessage);
				red5Manager.doMailBoxCount();
			}
			
			private function mailBoxCountEvent(event:MailBoxCountEvent):void {
				trace("MailBoxCountEvent ");
				phoneCanvas.mailBoxCount(event.newMessage, event.oldMessage);
			}
			
			private function keyHandler(event:KeyboardEvent):void {
			
				switch(event.charCode) {
					case 48:
						phoneCanvas.addChr("0");
						break;
					case 49:
						phoneCanvas.addChr("1");
						break;
					case 50:
						phoneCanvas.addChr("2");
						break;
					case 51:
						phoneCanvas.addChr("3");
						break;
					case 52:
						phoneCanvas.addChr("4");
						break;
					case 53:
						phoneCanvas.addChr("5");
						break;
					case 54:
						phoneCanvas.addChr("6");
						break;
					case 55:
						phoneCanvas.addChr("7");
						break;
					case 56:
						phoneCanvas.addChr("8");
						break;
					case 57:
						phoneCanvas.addChr("9");
						break;
					case 8:
						phoneCanvas.removeChr();
						break;
					case 127:
						
						break;
					case 35:
						//phoneCanvas.addChr("#");
						break;
					case 42:
						//phoneCanvas.addChr("*");
						break;
					default:
				}
			}
			
	        
		]]>
	</mx:Script>
	
	
	<red5phone:LoginCanvas id="loginCanvas" x="0" y="0" width="100%" height="100%" borderStyle="none" />	
	<red5phone:PhoneCanvas id="phoneCanvas" x="0" y="0" width="100%" height="100%" visible="false"/>
	
</mx:Application>
